[{"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/index.js":"1","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Auth/Login.js":"2","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/App.js":"3","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Auth/Register.js":"4","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/reportWebVitals.js":"5","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/Chat.js":"6","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/services/authService.js":"7","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/index.js":"8","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/reducers/index.js":"9","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/reducers/auth.js":"10","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/actions/auth.js":"11","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/types/index.js":"12","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Navbar/Navbar.js":"13","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Friend/Friend.js":"14","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/MessageInput/MessageInput.js":"15","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/services/chatService.js":"16","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/utils/helpers.js":"17","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/hooks/socketConnect.js":"18","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Modal/Modal.js":"19","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/reducers/chat.js":"20","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/FriendList/FriendList.js":"21","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/ChatHeader/ChatHeader.js":"22","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Message/Message.js":"23","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/actions/chat.js":"24","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/MessageBox/MessageBox.js":"25","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/services/api.js":"26","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Messenger/Messenger.js":"27"},{"size":626,"mtime":1609907309152,"results":"28","hashOfConfig":"29"},{"size":2225,"mtime":1609905013085,"results":"30","hashOfConfig":"29"},{"size":1109,"mtime":1609887281936,"results":"31","hashOfConfig":"29"},{"size":3818,"mtime":1609887977144,"results":"32","hashOfConfig":"29"},{"size":362,"mtime":1609809762700,"results":"33","hashOfConfig":"29"},{"size":935,"mtime":1609887978707,"results":"34","hashOfConfig":"29"},{"size":1557,"mtime":1609887781524,"results":"35","hashOfConfig":"29"},{"size":215,"mtime":1609887646688,"results":"36","hashOfConfig":"29"},{"size":182,"mtime":1609887646707,"results":"37","hashOfConfig":"29"},{"size":1246,"mtime":1609887646700,"results":"38","hashOfConfig":"29"},{"size":1030,"mtime":1609887646668,"results":"39","hashOfConfig":"29"},{"size":144,"mtime":1609887646730,"results":"40","hashOfConfig":"29"},{"size":5667,"mtime":1609887979013,"results":"41","hashOfConfig":"29"},{"size":1265,"mtime":1609887978914,"results":"42","hashOfConfig":"29"},{"size":6509,"mtime":1609887978996,"results":"43","hashOfConfig":"29"},{"size":2360,"mtime":1609888190332,"results":"44","hashOfConfig":"29"},{"size":100,"mtime":1609888400291,"results":"45","hashOfConfig":"29"},{"size":2118,"mtime":1609908629272,"results":"46","hashOfConfig":"29"},{"size":1147,"mtime":1609887979046,"results":"47","hashOfConfig":"29"},{"size":10216,"mtime":1609908551886,"results":"48","hashOfConfig":"29"},{"size":3077,"mtime":1609908283074,"results":"49","hashOfConfig":"29"},{"size":5295,"mtime":1609887978871,"results":"50","hashOfConfig":"29"},{"size":1040,"mtime":1609887978975,"results":"51","hashOfConfig":"29"},{"size":3184,"mtime":1609887646672,"results":"52","hashOfConfig":"29"},{"size":3216,"mtime":1609887978987,"results":"53","hashOfConfig":"29"},{"size":720,"mtime":1609905818498,"results":"54","hashOfConfig":"29"},{"size":938,"mtime":1609887979005,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6w9vpy",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/index.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Auth/Login.js",[],["120","121"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/App.js",["122","123"],"import logo from './logo.svg';\nimport {useState} from 'react'\nimport './App.css';\nimport Login from './components/Auth/Login'; \nimport Register from './components/Auth/Register';\nimport Chat from './components/Chat/Chat';\nimport{BrowserRouter as Router, Route, Switch} from 'react-router-dom'; \nimport './App.scss';\n\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSmile, faImage } from '@fortawesome/free-regular-svg-icons'\nimport { faSpinner, faEllipsisV, faUserPlus, faSignOutAlt, faTrash, faCaretDown, faUpload, faTimes, faBell } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faSmile, faImage, faSpinner, faEllipsisV, faUserPlus, faSignOutAlt, faTrash, faCaretDown, faUpload, faTimes, faBell)\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Chat}/>\n          <Route path=\"/login\" component={Login}/>\n          <Route path=\"/register\" component={Register}/>\n\n\n          <Route render={() => <h1> Page not found </h1>}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n",["124","125"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Auth/Register.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/reportWebVitals.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/Chat.js",["126","127"],"import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useSocket from './hooks/socketConnect'\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport { fetchChats } from '../../store/actions/chat'\r\nimport FriendList from './components/FriendList/FriendList'\r\nimport Messenger from './components/Messenger/Messenger'\r\nimport './Chat.scss'\r\n\r\nconst Chat = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.authReducer.user)\r\n\r\n    useSocket(user, dispatch)\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(fetchChats()).then(res => console.log(res)).catch(err => console.log(err))\r\n    // }, [dispatch])\r\n\r\n    return (\r\n        <div id='chat-container'>\r\n            <Navbar />\r\n            <div id='chat-wrap'>\r\n                <FriendList />\r\n                <Messenger />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat",["128","129"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/services/authService.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/index.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/reducers/index.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/reducers/auth.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/actions/auth.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/types/index.js",[],["130","131"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Navbar/Navbar.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Friend/Friend.js",[],["132","133"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/MessageInput/MessageInput.js",["134"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport ChatService from '../../../../services/chatService'\r\nimport { Picker } from 'emoji-mart'\r\nimport { incrementScroll } from '../../../../store/actions/chat'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport './MessageInput.scss'\r\n\r\nconst MessageInput = ({ chat }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.authReducer.user)\r\n    const socket = useSelector(state => state.chatReducer.socket)\r\n    const newMessage = useSelector(state => state.chatReducer.newMessage)\r\n\r\n    const fileUpload = useRef()\r\n    const msgInput = useRef()\r\n\r\n    const [message, setMessage] = useState('')\r\n    const [image, setImage] = useState('')\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false)\r\n    const [showNewMessageNotification, setShowNewMessageNotification] = useState(false)\r\n\r\n    const handleMessage = (e) => {\r\n        const value = e.target.value\r\n        setMessage(value)\r\n\r\n        const receiver = {\r\n            chatId: chat.id,\r\n            fromUser: user,\r\n            toUserId: chat.Users.map(user => user.id)\r\n        }\r\n\r\n        if (value.length === 1) {\r\n            receiver.typing = true\r\n            socket.emit('typing', receiver)\r\n        }\r\n\r\n        if (value.length === 0) {\r\n            receiver.typing = false\r\n            socket.emit('typing', receiver)\r\n        }\r\n\r\n        // notify other users that this user is typing something\r\n    }\r\n\r\n    const handleKeyDown = (e, imageUpload) => {\r\n        if (e.key === 'Enter') sendMessage(imageUpload)\r\n    }\r\n\r\n    const sendMessage = (imageUpload) => {\r\n\r\n        if (message.length < 1 && !imageUpload) return\r\n\r\n        const msg = {\r\n            type: imageUpload ? 'image' : 'text',\r\n            fromUser: user,\r\n            toUserId: chat.Users.map(user => user.id),\r\n            chatId: chat.id,\r\n            message: imageUpload ? imageUpload : message\r\n        }\r\n\r\n        setMessage('')\r\n        setImage('')\r\n        setShowEmojiPicker(false)\r\n\r\n        // send message with socket\r\n        socket.emit('message', msg)\r\n    }\r\n\r\n    const handleImageUpload = () => {\r\n        const formData = new FormData()\r\n        formData.append('id', chat.id)\r\n        formData.append('image', image)\r\n\r\n        ChatService.uploadImage(formData)\r\n            .then(image => {\r\n                sendMessage(image)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const selectEmoji = (emoji) => {\r\n        const startPosition = msgInput.current.selectionStart\r\n        const endPosition = msgInput.current.selectionEnd\r\n        const emojiLength = emoji.native.length\r\n        const value = msgInput.current.value\r\n        setMessage(value.substring(0, startPosition) + emoji.native + value.substring(endPosition, value.length))\r\n        msgInput.current.focus()\r\n        msgInput.current.selectionEnd = endPosition + emojiLength\r\n    }\r\n\r\n    useEffect(() => {\r\n        const msgBox = document.getElementById('msg-box')\r\n        if (!newMessage.seen && newMessage.chatId === chat.id && msgBox.scrollHeight !== msgBox.clientHeight) {\r\n            if (msgBox.scrollTop > msgBox.scrollHeight * 0.30) {\r\n                dispatch(incrementScroll())\r\n            } else {\r\n                setShowNewMessageNotification(true)\r\n            }\r\n        } else {\r\n            setShowNewMessageNotification(false)\r\n        }\r\n    }, [newMessage, dispatch])\r\n\r\n    const showNewMessage = () => {\r\n        dispatch(incrementScroll())\r\n        setShowNewMessageNotification(false)\r\n    }\r\n\r\n    return (\r\n        <div id='input-container'>\r\n            <div id='image-upload-container'>\r\n                <div>\r\n                    {\r\n                        showNewMessageNotification\r\n                            ? <div id='message-notification' onClick={showNewMessage}>\r\n                                <FontAwesomeIcon icon='bell' className='fa-icon' />\r\n                                <p className='m-0'>new message</p>\r\n                            </div>\r\n                            : null\r\n                    }\r\n                </div>\r\n\r\n                <div id='image-upload'>\r\n                    {\r\n                        image.name ?\r\n                            <div id='image-details'>\r\n                                <p className='m-0'>{image.name}</p>\r\n                                <FontAwesomeIcon\r\n                                    onClick={handleImageUpload}\r\n                                    icon='upload'\r\n                                    className='fa-icon'\r\n                                />\r\n                                <FontAwesomeIcon\r\n                                    onClick={() => setImage('')}\r\n                                    icon='times'\r\n                                    className='fa-icon'\r\n                                />\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <FontAwesomeIcon\r\n                        onClick={() => fileUpload.current.click()}\r\n                        icon={['far', 'image']}\r\n                        className='fa-icon'\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div id='message-input'>\r\n                <input\r\n                    ref={msgInput}\r\n                    value={message}\r\n                    type='text'\r\n                    placeholder='Message...'\r\n                    onChange={e => handleMessage(e)}\r\n                    onKeyDown={e => handleKeyDown(e, false)}\r\n                />\r\n                <FontAwesomeIcon\r\n                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}\r\n                    icon={['far', 'smile']}\r\n                    className='fa-icon'\r\n                />\r\n            </div>\r\n\r\n            <input id='chat-image' ref={fileUpload} type='file' onChange={e => setImage(e.target.files[0])} />\r\n\r\n            {\r\n                showEmojiPicker\r\n                    ? <Picker\r\n                        title='Pick your emoji...'\r\n                        emoji='point_up'\r\n                        style={{ position: 'absolute', bottom: '20px', right: '20px' }}\r\n                        onSelect={selectEmoji}\r\n                    />\r\n                    : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageInput","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/services/chatService.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/utils/helpers.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/hooks/socketConnect.js",["135"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Modal/Modal.js",["136"],"import React from 'react'\r\nimport './Modal.scss'\r\n\r\nconst Modal = (props) => {\r\n\r\n    const findByKey = (name) =>\r\n        props.children.map(child => {\r\n            if (child.key === name) return child\r\n        })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n\r\n        if (e.target.classList.contains('modal-close')) {\r\n            return props.click()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='modal-mask modal-close' onClick={closeModal}>\r\n            <div className='modal-wrapper'>\r\n                <div className='modal-container'>\r\n\r\n                    <div className='modal-header'>\r\n                        {findByKey('header')}\r\n                    </div>\r\n\r\n                    <div className='modal-body'>\r\n                        {findByKey('body')}\r\n                    </div>\r\n\r\n                    <div className='modal-footer'>\r\n                        <button className='modal-close' onClick={closeModal}>CLOSE</button>\r\n                        {findByKey('footer')}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/reducers/chat.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/FriendList/FriendList.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/ChatHeader/ChatHeader.js",["137","138","139","140"],"import React, { Fragment, useState } from 'react'\r\nimport { userStatus } from '../../../../utils/helpers'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { useSelector } from 'react-redux'\r\nimport Modal from '../../../Modal/Modal'\r\nimport ChatService from '../../../../services/chatService'\r\nimport './ChatHeader.scss'\r\n\r\nconst ChatHeader = ({ chat }) => {\r\n\r\n    const [showChatOptions, setShowChatOptions] = useState(false)\r\n    const [showAddFriendModal, setShowAddFriendModal] = useState(false)\r\n    const [showLeaveChatModal, setShowLeaveChatModal] = useState(false)\r\n    const [showDeleteChatModal, setShowDeleteChatModal] = useState(false)\r\n    const [suggestions, setSuggestions] = useState([])\r\n\r\n    const socket = useSelector(state => state.chatReducer.socket)\r\n\r\n\r\n    const searchFriends = (e) => {\r\n        ChatService.searchUsers(e.target.value)\r\n            .then(res => setSuggestions(res))\r\n    }\r\n\r\n    const addNewFriend = (id) => {\r\n        ChatService.addFriendToGroupChat(id, chat.id)\r\n            .then(data => {\r\n                socket.emit('add-user-to-group', data)\r\n                setShowAddFriendModal(false)\r\n            }).catch(err => console.log(err))\r\n    }\r\n\r\n    const leaveChat = () => {\r\n        ChatService.leaveCurrentChat(chat.id)\r\n            .then(data => {\r\n                socket.emit('leave-current-chat', data)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const deleteChat = () => {\r\n        ChatService.deleteCurrentChat(chat.id)\r\n            .then(data => {\r\n                socket.emit('delete-chat', data)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div id='chatter'>\r\n                {\r\n                    chat.Users.map(user => {\r\n                        return <div className='chatter-info' key={user.id}>\r\n                            <h3>{user.firstName} {user.lastName}</h3>\r\n                            <div className='chatter-status'>\r\n                                <span className={`online-status ${userStatus(user)}`}></span>\r\n                            </div>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <FontAwesomeIcon\r\n                onClick={() => setShowChatOptions(!showChatOptions)}\r\n                icon={['fas', 'ellipsis-v']}\r\n                className='fa-icon'\r\n            />\r\n            {\r\n                showChatOptions\r\n                    ? <div id='settings'>\r\n                        <div onClick={() => setShowAddFriendModal(true)}>\r\n                            <FontAwesomeIcon\r\n                                icon={['fas', 'user-plus']}\r\n                                className='fa-icon'\r\n                            />\r\n                            <p>Add user to chat</p>\r\n                        </div>\r\n\r\n                        {\r\n                            chat.type === 'group'\r\n                                ? <div onClick={() => leaveChat()}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={['fas', 'sign-out-alt']}\r\n                                        className='fa-icon'\r\n                                    />\r\n                                    <p>Leave chat</p>\r\n                                </div>\r\n                                : null\r\n                        }\r\n\r\n                        {\r\n                            chat.type === 'dual' ?\r\n                                <div onClick={() => deleteChat()}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={['fas', 'trash']}\r\n                                        className='fa-icon'\r\n                                    />\r\n                                    <p>Delete chat</p>\r\n                                </div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    : null\r\n            }\r\n            {\r\n                showAddFriendModal &&\r\n                <Modal click={() => setShowAddFriendModal(false)}>\r\n                    <Fragment key='header'>\r\n                        <h3 className='m-0'>Add friend to group chat</h3>\r\n                    </Fragment>\r\n\r\n                    <Fragment key='body'>\r\n                        <p>Find friends by typing their name bellow</p>\r\n                        <input\r\n                            onInput={e => searchFriends(e)}\r\n                            type='text'\r\n                            placeholder='Search...'\r\n                        />\r\n                        <div id='suggestions'>\r\n                            {\r\n                                suggestions.map(user => {\r\n                                    return <div key={user.id} className='suggestion'>\r\n                                        <p className='m-0'>{user.firstName} {user.lastName}</p>\r\n                                        <button onClick={() => addNewFriend(user.id)}>ADD</button>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Fragment>\r\n                </Modal>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ChatHeader","/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Message/Message.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/store/actions/chat.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/MessageBox/MessageBox.js",["141"],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/services/api.js",[],"/Users/nguyennhat/Desktop/chatapp/chatfrontend/src/components/Chat/components/Messenger/Messenger.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":12},{"ruleId":"146","severity":1,"message":"150","line":2,"column":9,"nodeType":"148","messageId":"149","endLine":2,"endColumn":17},{"ruleId":"142","replacedBy":"151"},{"ruleId":"144","replacedBy":"152"},{"ruleId":"146","severity":1,"message":"153","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"154","line":5,"column":10,"nodeType":"148","messageId":"149","endLine":5,"endColumn":20},{"ruleId":"142","replacedBy":"155"},{"ruleId":"144","replacedBy":"156"},{"ruleId":"142","replacedBy":"157"},{"ruleId":"144","replacedBy":"158"},{"ruleId":"142","replacedBy":"159"},{"ruleId":"144","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":105,"column":8,"nodeType":"163","endLine":105,"endColumn":30,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":61,"column":8,"nodeType":"163","endLine":61,"endColumn":18,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":7,"column":34,"nodeType":"169","messageId":"170","endLine":7,"endColumn":36},{"ruleId":"146","severity":1,"message":"171","line":13,"column":12,"nodeType":"148","messageId":"149","endLine":13,"endColumn":30},{"ruleId":"146","severity":1,"message":"172","line":13,"column":32,"nodeType":"148","messageId":"149","endLine":13,"endColumn":53},{"ruleId":"146","severity":1,"message":"173","line":14,"column":12,"nodeType":"148","messageId":"149","endLine":14,"endColumn":31},{"ruleId":"146","severity":1,"message":"174","line":14,"column":33,"nodeType":"148","messageId":"149","endLine":14,"endColumn":55},{"ruleId":"161","severity":1,"message":"175","line":64,"column":8,"nodeType":"163","endLine":64,"endColumn":22,"suggestions":"176"},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["177"],["178"],"'useEffect' is defined but never used.","'fetchChats' is defined but never used.",["177"],["178"],["177"],["178"],["177"],["178"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chat.id'. Either include it or remove the dependency array.","ArrayExpression",["179"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["180"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'showLeaveChatModal' is assigned a value but never used.","'setShowLeaveChatModal' is assigned a value but never used.","'showDeleteChatModal' is assigned a value but never used.","'setShowDeleteChatModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'senderTyping.typing'. Either include it or remove the dependency array.",["181"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [newMessage, dispatch, chat.id]",{"range":"188","text":"189"},"Update the dependencies array to be: [dispatch, user]",{"range":"190","text":"191"},"Update the dependencies array to be: [scrollBottom, senderTyping.typing]",{"range":"192","text":"193"},[3557,3579],"[newMessage, dispatch, chat.id]",[2074,2084],"[dispatch, user]",[2077,2091],"[scrollBottom, senderTyping.typing]"]